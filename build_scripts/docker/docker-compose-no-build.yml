# Expected shell environment variables available to docker-compose (examples in parens):
# See docker-common.sh
#
# DOCKER_REGISTRY_URI  (320588532383.dkr.ecr.us-east-1.amazonaws.com)
# DOCKER_HOST_URL      (o2.radiantbluecloud.com)
# AWS_CREDENTIALS_PATH ("/home/jenkins/.aws:/root/.aws")

version: '2'
services:
  o2-web-proxy:
    image: ${DOCKER_REGISTRY_URI}/o2-web-proxy
    container_name: o2-web-proxy
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    ports:
      - "80:80"
    volumes:
      - /data:/data
    restart: always
  # o2-base:
  #   container_name: o2-base
  #   image: ${DOCKER_REGISTRY_URI}/o2-base
  o2-db:
    image: ${DOCKER_REGISTRY_URI}/o2-db
    container_name: o2-db
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_PASSWORD: abc123
      POSTGRES_DB: omar_prod
    ports:
      - "4990:5432"
    restart: always
  o2-stager:
    image: ${DOCKER_REGISTRY_URI}/o2-stager
    container_name: o2-stager
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    volumes:
      - /data:/data
    ports:
      - "5002:8080"
    # depends_on:
    #   - o2-base
    #   - o2-db
    #   - o2-web-proxy
    restart: always
    # depends_on:
    #   - o2-db
  o2-wms:
    image: ${DOCKER_REGISTRY_URI}/o2-wms
    container_name: o2-wms
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    volumes:
      - /data:/data
    ports:
      - "4997:8080"
    # depends_on:
    #   - o2-db
    #   - o2-stager
    #   - o2-web-proxy
    restart: always
    # depends_on:
    #   - o2-db
  o2-wfs:
    image: ${DOCKER_REGISTRY_URI}/o2-wfs
    container_name: o2-wfs
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    ports:
      - "4998:8080"
    # depends_on:
    #   - o2-base
    #   - o2-db
    #   - o2-stager
    #   - o2-wms
    #   - o2-web-proxy
    restart: always
    # depends_on:
    #   - o2-db
  # o2-wcs:
  #   image: ${DOCKER_REGISTRY_URI}/o2-wcs
  #   container_name: o2-wcs
  #   environment:
  #     DBHOST: o2-db
  #     DBPORT: :5432
  #     DBNAME: omar_prod
  #     DBUSER: postgres_user
  #     DBPASS: abc123
  #     DOCKER_HOST_IP: ${DOCKER_HOST_URL}
  #   volumes:
  #     - /data:/data
  #   ports:
  #     - "5013:8080"
  #   depends_on:
  #     #- o2-base
  #     - o2-db
  #     - o2-stager
  #     #- o2-wms
  #     #- o2-wfs
  #     - o2-web-proxy
  o2-omar:
    image: ${DOCKER_REGISTRY_URI}/o2-omar
    container_name: o2-omar
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      WFSURL: ${DOCKER_HOST_URL}/o2-wfs
      WFSPORT:
      WMSURL: ${DOCKER_HOST_URL}/o2-wms
      WMSPORT:
      STAGERURL: ${DOCKER_HOST_URL}/o2-stager
      STAGERPORT:
      DOWNLOADURL: ${DOCKER_HOST_URL}/o2-download
      DOWNLOADPORT:
      KMLURL: ${DOCKER_HOST_URL}/o2-superoverlay
      KMLPORT:
      PREDIOURL: ${DOCKER_HOST_URL}/o2-predio
      PREDIOPORT:
      PREDIOENABLED: "false"
      TWOFISHURL: ${DOCKER_HOST_URL}/twofishes
      TWOFISHPORT:
      TLVAPPURL: ${DOCKER_HOST_URL}
      TLVPORT:
      TLVAPPENABLED: "true"
      SWIPEURL: ${DOCKER_HOST_URL}/o2-swipe/swipe/index
      SWIPEPORT:
      SWIPEENABLED: "true"
      JPIPURL: ${DOCKER_HOST_URL}/o2-jpip
      JPIPPORT:
      JPIPENABLED: "true"
      WMTSURL: ${DOCKER_HOST_URL}/o2-wmts
      WMTSPORT:
      WMTSENABLED: "true"
      PWIKURL:
      PWIKPORT:
      PWIKENABLED: "true"
      APIURL:
      APIPORT:
      APIENABLED: "false"
      BANNERCOLOR: green
      BANNERCLASSIFICATION: Unclassified
    ports:
      - "5010:8080"
    # depends_on:
    #   - o2-base
    #   - o2-db
    #   - o2-wms
    #   - o2-wfs
    #   - o2-stager
    #   - o2-web-proxy
    restart: always
    # depends_on:
    #   - o2-wfs
    #   - o2-wms
    #   - o2-wmts
    #   - o2-swipe
  o2-wmts:
    image: ${DOCKER_REGISTRY_URI}/o2-wmts
    container_name: o2-wmts
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      WFSSERVER: ${DOCKER_HOST_URL}/o2-wfs
      WFSPORT:
      WMSSERVER: ${DOCKER_HOST_URL}/o2-wms
      WMSPORT:
    ports:
      - "4999:8080"
    # depends_on:
      # - o2-base
      # - o2-db
      # - o2-web-proxy
    restart: always
    # depends_on:
    #   - o2-wfs
    #   - o2-wms

  o2-sqs:
    image: ${DOCKER_REGISTRY_URI}/o2-sqs
    container_name: o2-sqs
    environment:
      AWSDNS: sqs.us-east-1.amazonaws.com
      AWSQUEUEPATH: 320588532383/avro-tst
      WAIT_TIME_SECONDS: 20
      NUMBER_OF_MESSAGES: 1
      POLgG_INTERVAL_SECONDS: 10
      DESTINATION_TYPE: post
      DESTINATION_POST_END_POINT: o2-avro
      DESTINATION_POST_END_POINT_PORT: :8080
      DESTINATION_POST_FIELD: message
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    volumes:
      # Modify the path below to reflect your
      # AWS credentials location.
      - ${AWS_CREDENTIALS_PATH}
    ports:
      - "5000:8080"
    # depends_on:
    #   - o2-base
    #   - o2-stager
    #   - o2-avro
    #   - o2-web-proxy
    restart: always
    # depends_on:
    #   - o2-avro
  o2-avro:
    image: ${DOCKER_REGISTRY_URI}/o2-avro
    container_name: o2-avro
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      ADDRASTERENDPOINTURL: o2-stager
      ADDRASTERENDPOINTPORT: :8080
    volumes:
      # Mount the the host local data directory to the container
      - /data:/data
    ports:
      - "5001:8080"
    # depends_on:
    #   - o2-base
    #   - o2-db
    #   - o2-stager
    #   - o2-web-proxy
    restart: always
    # depends_on:
    #   - o2-db
    #   - o2-stager
  o2-jpip:
    image: ${DOCKER_REGISTRY_URI}/o2-jpip
    container_name: o2-jpip
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      JPIPCACHEDIR: /data/jpip-cache
      JPIPSERVERURL: ${DOCKER_HOST_URL}
      JPIPSERVERPORT: 5004
    volumes:
      # Mount the the host local data directory to the container
      - /data:/data
    ports:
      - "5003:8080"
    # depends_on:
    #   - o2-base
    #   - o2-web-proxy
    restart: always
  o2-jpip-server:
    image: ${DOCKER_REGISTRY_URI}/o2-jpip-server
    container_name: o2-jpip-server
    environment:
      JPIPCACHEDIR: /data/jpip-cache
      JPIPSERVERURL: localhost
      JPIPSERVERPORT: 8080
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    volumes:
      # Mount the the host local data directory to the container
      - /data:/data
    ports:
      - "5004:8080"
    restart: always
  o2-superoverlay:
    image: ${DOCKER_REGISTRY_URI}/o2-superoverlay
    container_name: o2-superoverlay
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      O2URL: ${DOCKER_HOST_URL}/o2-omar
      WMSURL: ${DOCKER_HOST_URL}/o2-wms
      WMSPORT:
    ports:
      - "5009:8080"
    # depends_on:
    #   - o2-base
    #   - o2-web-proxy
    restart: always
    # depends_on:
    #   - o2-db
  o2-download:
    image: ${DOCKER_REGISTRY_URI}/o2-download
    container_name: o2-download
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    volumes:
      # Mount the the host local data directory to the container
      - /data:/data
    ports:
      - "5011:8080"
    # depends_on:
    #   - o2-base
    #   - o2-web-proxy
    restart: always
    # depends_on:
    #   - o2-db
  o2-swipe:
    image: ${DOCKER_REGISTRY_URI}/o2-swipe
    container_name: o2-swipe
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      WFSURL: ${DOCKER_HOST_URL}/o2-wfs
      WFSPORT:
      WMSURL: ${DOCKER_HOST_URL}/o2-wms
      WMSPORT:
    ports:
      - "5012:8080"
    # depends_on:
    #   - o2-base
    #   - o2-db
    #   - o2-stager
    #   - o2-web-proxy
    restart: always
    # depends_on:
    #   - o2-db
    #   - o2-wfs
    #   - o2-wms
  o2-mensa:
    image: ${DOCKER_REGISTRY_URI}/o2-mensa
    container_name: o2-mensa
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    volumes:
      - /data:/data
    ports:
      - "5014:8080"
    # depends_on:
    #   - o2-base
    #   - o2-web-proxy
  o2-twofishes:
    image: ${DOCKER_REGISTRY_URI}/twofishes
    container_name: twofishes
    ports:
      - "5006:8081"
    restart: always
  o2-tlv:
    image: ${DOCKER_REGISTRY_URI}/tlv
    container_name: tlv
    environment:
      DBHOST: o2-db
      DBPORT: :5432
      DBNAME: tlv_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      WFSURL: ${DOCKER_HOST_URL}/o2-wfs
      WMSURL: ${DOCKER_HOST_URL}/o2-wms
    ports:
      - "5015:8080"
    restart: always
    # depends_on:
    #   - o2-wfs
    #   - o2-wms
