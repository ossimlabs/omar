# Expected shell environment variables available to docker-compose (examples in parens):
#
# DOCKER_REGISTRY_URI  (320588532383.dkr.ecr.us-east-1.amazonaws.com)
# DOCKER_HOST_URL      (o2.radiantbluecloud.com)
# AWS_CREDENTIALS_PATH ("/home/jenkins/.aws:/root/.aws")

version: '2'
services:
  o2-avro:
    build: ./o2-avro
    container_name: o2-avro
    environment:
      ADDRASTERENDPOINTPORT: :8080
      ADDRASTERENDPOINTURL: o2-stager
      DBHOST: o2-db
      DBNAME: omar_prod
      DBPASS: abc123
      DBPORT: 5432
      DBUSER: postgres_user
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    image: ${DOCKER_REGISTRY_URI}/o2-avro
    ports:
      - "5001:8080"
    restart: always
    volumes:
      - /data:/data
  o2-db:
    build: ./o2-db
    container_name: o2-db
    environment:
      POSTGRES_DB: omar_prod
      POSTGRES_PASSWORD: abc123
      POSTGRES_USER: postgres_user
    image: ${DOCKER_REGISTRY_URI}/o2-db
    ports:
      - "4990:5432"
    restart: always
  o2-disk-cleanup:
    build: ./o2-disk-cleanup
    container_name: o2-disk-cleanup
    environment:
      O2_DISK_VOLUME: /data
      O2_MAX_DISK_LIMIT: 0.9
      O2_MIN_DISK_LIMIT: 0.8
      JDBC_CONNECTION_STRING: jdbc:postgresql://o2-db:5432/omar_prod
      POSTGRES_PASSWORD: abc123
      POSTGRES_USER: postgres_user
      STAGER_URL: ${DOCKER_HOST_URL}/o2-stager
    image: ${DOCKER_REGISTRY_URI}/o2-disk-cleanup
    ports:
      - "4991:8080"
    restart: always
    volumes:
      - /data:/data
  o2-download:
    build: ./o2-download
    container_name: o2-download
    environment:
      DBHOST: o2-db
      DBNAME: omar_prod
      DBPASS: abc123
      DBPORT: 5432
      DBUSER: postgres_user
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    image: ${DOCKER_REGISTRY_URI}/o2-download
    ports:
      - "5011:8080"
    restart: always
    volumes:
      - /data:/data
  o2-jpip:
    build: ./o2-jpip
    container_name: o2-jpip
    environment:
      DBHOST: o2-db
      DBNAME: omar_prod
      DBPASS: abc123
      DBPORT: 5432
      DBUSER: postgres_user
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      JPIPCACHEDIR: /data/jpip-cache
      JPIPSERVERPORT: 5004
      JPIPSERVERURL: ${DOCKER_HOST_URL}
    image: ${DOCKER_REGISTRY_URI}/o2-jpip
    ports:
      - "5003:8080"
    restart: always
    volumes:
      - /data:/data
  o2-jpip-server:
    build: ./o2-jpip-server
    container_name: o2-jpip-server
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      JPIPCACHEDIR: /data/jpip-cache
      JPIPSERVERPORT: 8080
      JPIPSERVERURL: localhost
    image: ${DOCKER_REGISTRY_URI}/o2-jpip-server
    ports:
      - "5004:8080"
    restart: always
    volumes:
      - /data:/data
  o2-mensa:
    build: ./o2-mensa
    container_name: o2-mensa
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    image: ${DOCKER_REGISTRY_URI}/o2-mensa
    ports:
      - "5014:8080"
    volumes:
      - /data:/data
  o2-omar:
    build: ./o2-omar
    container_name: o2-omar
    environment:
      APIENABLED: "false"
      APIPORT:
      APIURL:
      BANNERCOLOR: green
      BANNERCLASSIFICATION: Unclassified
      DBHOST: o2-db
      DBNAME: omar_prod
      DBPASS: abc123
      DBPORT: 5432
      DBUSER: postgres_user
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      DOWNLOADPORT:
      DOWNLOADURL: ${DOCKER_HOST_URL}/o2-download
      JPIPENABLED: "true"
      JPIPPORT:
      JPIPURL: http://${DOCKER_HOST_URL}/o2-jpip
      KMLPORT:
      KMLURL: ${DOCKER_HOST_URL}/o2-superoverlay
      MENSAPORT:
      MENSAURL: ${DOCKER_HOST_URL}/o2-mensa
      PREDIOENABLED: "false"
      PREDIOPORT:
      PREDIOURL: ${DOCKER_HOST_URL}/o2-predio
      PWIKENABLED: "false"
      PWIKPORT:
      PWIKURL:
      STAGERPORT:
      STAGERURL: ${DOCKER_HOST_URL}/o2-stager
      TLVENABLED: "true"
      TLVURL: ${DOCKER_HOST_URL}/tlv
      TWOFISHPORT:
      TWOFISHURL: ${DOCKER_HOST_URL}/twofishes
      USER_GUIDE_ENABLED: "true"
      USER_GUIDE_URL: ossimlabs.s3-website-us-east-1.amazonaws.com/o2/docs/
      WFSPORT:
      WFSURL: ${DOCKER_HOST_URL}/o2-wfs
      WMSPORT:
      WMSURL: ${DOCKER_HOST_URL}/o2-wms
      WMTSENABLED: "true"
      WMTSPORT:
      WMTSURL: ${DOCKER_HOST_URL}/o2-wmts
    image: ${DOCKER_REGISTRY_URI}/o2-omar
    ports:
      - "5010:8080"
    restart: always
  o2-sqs:
    build: ./o2-sqs
    container_name: o2-sqs
    environment:
      AWSDNS: sqs.us-east-1.amazonaws.com
      AWSQUEUEPATH: 320588532383/avro-tst
      DESTINATION_POST_END_POINT: o2-avro
      DESTINATION_POST_END_POINT_PORT: :8080
      DESTINATION_POST_FIELD: message
      DESTINATION_TYPE: post
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      NUMBER_OF_MESSAGES: 1
      POLgG_INTERVAL_SECONDS: 10
      WAIT_TIME_SECONDS: 20
    image: ${DOCKER_REGISTRY_URI}/o2-sqs
    ports:
      - "5000:8080"
    restart: always
    volumes:
      # Modify the path below to reflect your
      # AWS credentials location.
      - ${AWS_CREDENTIALS_PATH}
  o2-stager:
    build: ./o2-stager
    container_name: o2-stager
    environment:
      DBHOST: o2-db
      DBPORT: 5432
      DBNAME: omar_prod
      DBUSER: postgres_user
      DBPASS: abc123
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    image: ${DOCKER_REGISTRY_URI}/o2-stager
    ports:
      - "5002:8080"
    restart: always
    volumes:
      - /data:/data
  o2-superoverlay:
    build: ./o2-superoverlay
    container_name: o2-superoverlay
    environment:
      DBHOST: o2-db
      DBNAME: omar_prod
      DBPASS: abc123
      DBPORT: 5432
      DBUSER: postgres_user
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      O2URL: ${DOCKER_HOST_URL}/o2-omar
      TLV_URL: ${DOCKER_HOST_URL}/tlv
      WFSURL: ${DOCKER_HOST_URL}/o2-wfs
      WMSPORT:
      WMSURL: ${DOCKER_HOST_URL}/o2-wms
    image: ${DOCKER_REGISTRY_URI}/o2-superoverlay
    ports:
      - "5009:8080"
    restart: always
  o2-tlv:
    build: ./tlv
    image: ${DOCKER_REGISTRY_URI}/tlv
    container_name: tlv
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      WFSURL: ${DOCKER_HOST_URL}/o2-wfs
      WMSURL: ${DOCKER_HOST_URL}/o2-wms
    ports:
      - "5015:8080"
    restart: always
  o2-twofishes:
    build: ./twofishes
    container_name: twofishes
    image: ${DOCKER_REGISTRY_URI}/twofishes
    ports:
      - "5006:8081"
    restart: always
#  o2-wcs:
#    build: ./o2-wcs
#    image: ${DOCKER_REGISTRY_URI}/o2-wcs
#    container_name: o2-wcs
#    environment:
#      DBHOST: o2-db
#      DBPORT: 5432
#      DBNAME: omar_prod
#      DBUSER: postgres_user
#      DBPASS: abc123
#      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
#    volumes:
#      - /data:/data
#    ports:
#      - "5013:8080"
  o2-web-proxy:
    build: ./o2-web-proxy
    container_name: o2-web-proxy
    environment:
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    image: ${DOCKER_REGISTRY_URI}/o2-web-proxy
    ports:
      - "80:80"
    restart: always
    volumes:
      - /data:/data
  o2-wfs:
    build: ./o2-wfs
    container_name: o2-wfs
    environment:
      DBHOST: o2-db
      DBNAME: omar_prod
      DBPASS: abc123
      DBPORT: 5432
      DBUSER: postgres_user
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      O2URL: ${DOCKER_HOST_URL}/o2-omar
      TLV_URL: ${DOCKER_HOST_URL}/tlv
      WFSURL: ${DOCKER_HOST_URL}/o2-wfs
      WMSURL: ${DOCKER_HOST_URL}/o2-wms
    image: ${DOCKER_REGISTRY_URI}/o2-wfs
    ports:
      - "4998:8080"
    restart: always
  o2-wms:
    build: ./o2-wms
    container_name: o2-wms
    environment:
      DBHOST: o2-db
      DBNAME: omar_prod
      DBPASS: abc123
      DBPORT: 5432
      DBUSER: postgres_user
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
    image: ${DOCKER_REGISTRY_URI}/o2-wms
    volumes:
      - /data:/data
    ports:
      - "4997:8080"
    restart: always
  o2-wmts:
    build: ./o2-wmts
    container_name: o2-wmts
    environment:
      DBHOST: o2-db
      DBNAME: omar_prod
      DBPASS: abc123
      DBPORT: 5432
      DBUSER: postgres_user
      DOCKER_HOST_IP: ${DOCKER_HOST_URL}
      WFSPORT:
      WFSSERVER: ${DOCKER_HOST_URL}/o2-wfs
      WMSPORT:
      WMSSERVER: ${DOCKER_HOST_URL}/o2-wms
    image: ${DOCKER_REGISTRY_URI}/o2-wmts
    ports:
      - "4999:8080"
    restart: always
